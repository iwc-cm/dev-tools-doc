##################################
Python正则表达式
##################################

简单正则表达式
==========================

正则表达式，是使用字符串表达的某种模式，可以用于匹配某一类字符串。

比如 abcd 作为一个正则表达式可以匹配 ffabcdef 中的 abcd。

像上面一样，多数字符只能匹配它本身，比如 正则表达式中的 a 匹配目标字符串中的 a， b 匹配 b 。这种情况下，类似于字符串搜索。
但是正则表达式比字符串搜索强大的地方在于提供了一些特殊字符，进行模式匹配。

#. ``.``

    英文的点 ``.`` 。可以用于匹配任意字符，

    * h.llo 可以匹配 hello, hfllo, hgllo ...
    * h..lo 可以匹配 hello, hablo, hxylo ...

#. ``*``

    星号 ``*`` ,并不是用来代指字符，而是说前面一个字符可以出现任意多次，即出现次数大于等于0 .
    并且 ``*`` 可以和 ``.`` 组合使用。

    * ap*le 可以匹配 ale, aple, apple, appple, ...
    * a.*le 可以匹配 ale, azzzzzzzle, abbbble, aaaaaaaaale, ...

#. ``+``

    ``+`` 和 ``*`` 很像，含义是 + 前面的字符出现次数大于等于1，和 * 的区别在于，它肯定至少出现一次。

    * ap+le 可以匹配 aple, apple, apppppppple, 但是不能匹配 ale,
    * a.+le 可以匹配 azle, azzzzzzzzle, abbbbbble, 不能匹配 ale。

#. ``?``

    ``?`` 表示前面的字符可以出现 0 ~ 1 次，也就是说可以出现或者不出现。
    
    * app?le 可以匹配 aple 和 apple
    * ap.?le 可以匹配 aple, apple, apale, apble, ...

#. ``\``

    前面提到过几种特殊字符 ``.*+?`` , 当需要匹配到字符串中的 * ，而不希望将它当成正则模式时，
    可以使用 ``\`` 将其转义为普通字符。 ``\`` 也可以用来转义 ``\`` 本身

    * ``app\?le`` 匹配 app?le , 不能匹配 apple 和 aple .
    * ``app\\le`` 可以匹配 ``app\le`` 
    * ``app\\?le`` 可以匹配 ``app\le`` 和 ``apple``

#. ``[ ]``

    方括号用来包含一组字符，当成一个字符来使用。

    ``.`` 可以理解为 ``[ ]`` 的特殊版本， ``.`` 可以匹配任意字符， ``[ ]`` 可以匹配指定字符，
    指定的字符填写在方括号内部，如果将所有字符都填写在方括号内部，作用就变成了匹配任意字符。

    * [abc] 可以匹配 a, b, c
    * h[abc]llo 可以匹配 hallo, hbllo, hcllo 不能匹配 habllo habcllo 

    需要注意的是， 方括号中可以不用 ``\`` 转义直接写 ``. * + ? | ^ $ ( ) [ { }`` 这些特殊字符。
    只有 ``] \`` 两个字符除外。只不过，加上转义符也是没有关系的。
    所以，如果记不住的话，还是每次都加上转义符吧，以免出错。

    * ``h[*?.]llo`` 可以匹配 h*llo, h?llo, h.llo。
    * ``h[\*\?\.]llo`` 和 ``h[*?.]llo`` 是等价的

    方括号也可以和 ``* + ?`` 配合使用。

    可以使用 ``-`` 表示区间

    * [a-z] 表示 abcd...xyz 的所有小写字母。
    * [a-zA-Z0-9] 表示 大写字母、小写字母、所有数字
    * [a-zA-Z0-9!@#] 表示 大写字母、小写字母、所有数字、!@#三个符号

    方括号括起来的字符本身是只能匹配一次的，可以和 ``*+?`` 结合使用匹配多次

    * p[abc]+ 可以匹配 pa, pb, pc, pab, pccc, pbcabbaaac ...


#. ``{ }``

    ``{}`` 是 ``* + ?`` 的增强版，它可以指定前一个字符出现的次数。语法是 ``{出现最小次数, 最大次数}``

    * ``*`` 等价于 ``{0, }``
    * ``+`` 等价于 ``{1, }``
    * ``?`` 等价于 ``{0, 1}``

    如果后面的数字不填写，就相当于无穷大， 如 ``{5, }`` 表示前一个字符出现至少5次。

    也可以只填写单个数字，如 {5} 等价于 {5, 5} ,

#. ``( )``

    将一个模式进行分组，看成是单个模式，单独使用时，并没有实际作用，一般作为其他功能的铺垫。

#. ``|``

    表示 或，和 [] 类似，但是 [] 只能表示单字符之间的或的关系。

    chin(a)|(ese) 可以匹配 china, chinese

#. ``^``

    匹配行首。

#. ``$``

    匹配行尾。

python re模块接口
==============================

.. 正则表达式中的组
.. 多行注释
.. 正则字符串，编译。
.. 官方文档。

正则表达式
==============================
